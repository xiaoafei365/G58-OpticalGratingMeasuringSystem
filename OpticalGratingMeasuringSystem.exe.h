/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'OpticalGratingMeasuringSystem.exe'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct _s_ThrowInfo;
struct _s_CatchableTypeArray;
struct _s_CatchableType;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct _EXCEPTION_RECORD;
struct _CONTEXT;
union _LARGE_INTEGER;

/* 1 */
enum __TI_flags
{
  TI_IsConst = 0x1,
  TI_IsVolatile = 0x2,
  TI_IsUnaligned = 0x4,
  TI_IsPure = 0x8,
  TI_IsWinRT = 0x10,
};

/* 2 */
enum __CT_flags
{
  CT_IsSimpleType = 0x1,
  CT_ByReferenceOnly = 0x2,
  CT_HasVirtualBase = 0x4,
  CT_IsWinRTHandle = 0x8,
  CT_IsStdBadAlloc = 0x10,
};

/* 3 */
struct FuncInfo
{
  int magicNumber;
  int maxState;
  void *pUnwindMap;
  int nTryBlocks;
  void *pTryBlockMap;
  int nIPMapEntries;
  void *pIPtoStateMap;
  void *pESTypeList;
  int EHFlags;
};

/* 4 */
struct UnwindMapEntry
{
  int toState;
  void *action;
};

/* 5 */
struct TryBlockMapEntry
{
  int tryLow;
  int tryHigh;
  int catchHigh;
  int nCatches;
  void *pHandlerArray;
};

/* 6 */
struct HandlerType
{
  int adjectives;
  void *pType;
  int dispCatchObj;
  void *addressOfHandler;
};

/* 7 */
struct TypeDescriptor
{
  void *pVFTable;
  void *spare;
  char name[];
};

/* 8 */
struct _EH4_SCOPETABLE_RECORD
{
  int EnclosingLevel;
  void *FilterFunc;
  void *HandlerFunc;
};

/* 25 */
typedef unsigned int DWORD;

/* 9 */
struct _EH4_SCOPETABLE
{
  DWORD GSCookieOffset;
  DWORD GSCookieXOROffset;
  DWORD EHCookieOffset;
  DWORD EHCookieXOROffset;
  struct _EH4_SCOPETABLE_RECORD ScopeRecord[];
};

/* 10 */
typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;

/* 44 */
typedef void *PVOID;

/* 11 */
struct _EH3_EXCEPTION_REGISTRATION
{
  struct _EH3_EXCEPTION_REGISTRATION *Next;
  PVOID ExceptionHandler;
  PSCOPETABLE_ENTRY ScopeTable;
  DWORD TryLevel;
};

/* 12 */
typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;

/* 13 */
typedef struct _EH3_EXCEPTION_REGISTRATION *PEH3_EXCEPTION_REGISTRATION;

/* 14 */
struct CPPEH_RECORD
{
  DWORD old_esp;
  EXCEPTION_POINTERS *exc_ptr;
  struct _EH3_EXCEPTION_REGISTRATION registration;
};

/* 16 */
typedef const _s_ThrowInfo ThrowInfo;

/* 15 */
typedef ThrowInfo _ThrowInfo;

/* 18 */
typedef void (__cdecl *PMFN)(void *);

/* 19 */
typedef const _s_CatchableTypeArray CatchableTypeArray;

/* 17 */
#pragma pack(push, 4)
struct _s_ThrowInfo
{
  unsigned int attributes;
  PMFN pmfnUnwind;
  int (__cdecl *pForwardCompat)();
  CatchableTypeArray *pCatchableTypeArray;
};
#pragma pack(pop)

/* 21 */
typedef const _s_CatchableType CatchableType;

/* 20 */
#pragma pack(push, 4)
struct _s_CatchableTypeArray
{
  int nCatchableTypes;
  CatchableType *arrayOfCatchableTypes[];
};
#pragma pack(pop)

/* 23 */
#pragma pack(push, 4)
struct PMD
{
  int mdisp;
  int pdisp;
  int vdisp;
};
#pragma pack(pop)

/* 22 */
#pragma pack(push, 4)
struct _s_CatchableType
{
  unsigned int properties;
  TypeDescriptor *pType;
  PMD thisDisplacement;
  int sizeOrOffset;
  PMFN copyFunction;
};
#pragma pack(pop)

/* 26 */
typedef unsigned __int16 WORD;

/* 27 */
typedef unsigned __int8 BYTE;

/* 24 */
struct _DCB
{
  DWORD DCBlength;
  DWORD BaudRate;
  unsigned __int32 fBinary : 1;
  unsigned __int32 fParity : 1;
  unsigned __int32 fOutxCtsFlow : 1;
  unsigned __int32 fOutxDsrFlow : 1;
  unsigned __int32 fDtrControl : 2;
  unsigned __int32 fDsrSensitivity : 1;
  unsigned __int32 fTXContinueOnXoff : 1;
  unsigned __int32 fOutX : 1;
  unsigned __int32 fInX : 1;
  unsigned __int32 fErrorChar : 1;
  unsigned __int32 fNull : 1;
  unsigned __int32 fRtsControl : 2;
  unsigned __int32 fAbortOnError : 1;
  unsigned __int32 fDummy2 : 17;
  WORD wReserved;
  WORD XonLim;
  WORD XoffLim;
  BYTE ByteSize;
  BYTE Parity;
  BYTE StopBits;
  char XonChar;
  char XoffChar;
  char ErrorChar;
  char EofChar;
  char EvtChar;
  WORD wReserved1;
};

/* 28 */
struct _COMMTIMEOUTS
{
  DWORD ReadIntervalTimeout;
  DWORD ReadTotalTimeoutMultiplier;
  DWORD ReadTotalTimeoutConstant;
  DWORD WriteTotalTimeoutMultiplier;
  DWORD WriteTotalTimeoutConstant;
};

/* 30 */
typedef void (__cdecl *_PVFV)();

/* 29 */
#pragma pack(push, 8)
struct _onexit_table_t
{
  _PVFV *_first;
  _PVFV *_last;
  _PVFV *_end;
};
#pragma pack(pop)

/* 32 */
typedef _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;

/* 36 */
typedef int LONG;

/* 37 */
typedef void *HANDLE;

/* 38 */
typedef unsigned int ULONG_PTR;

/* 31 */
#pragma pack(push, 8)
struct _RTL_CRITICAL_SECTION
{
  PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
  LONG LockCount;
  LONG RecursionCount;
  HANDLE OwningThread;
  HANDLE LockSemaphore;
  ULONG_PTR SpinCount;
};
#pragma pack(pop)

/* 35 */
struct _LIST_ENTRY
{
  _LIST_ENTRY *Flink;
  _LIST_ENTRY *Blink;
};

/* 34 */
typedef _LIST_ENTRY LIST_ENTRY;

/* 33 */
struct _RTL_CRITICAL_SECTION_DEBUG
{
  WORD Type;
  WORD CreatorBackTraceIndex;
  _RTL_CRITICAL_SECTION *CriticalSection;
  LIST_ENTRY ProcessLocksList;
  DWORD EntryCount;
  DWORD ContentionCount;
  DWORD Flags;
  WORD CreatorBackTraceIndexHigh;
  WORD SpareWORD;
};

/* 39 */
struct HINSTANCE__
{
  int unused;
};

/* 42 */
typedef _EXCEPTION_RECORD EXCEPTION_RECORD;

/* 41 */
typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

/* 46 */
typedef _CONTEXT CONTEXT;

/* 45 */
typedef CONTEXT *PCONTEXT;

/* 40 */
struct _EXCEPTION_POINTERS
{
  PEXCEPTION_RECORD ExceptionRecord;
  PCONTEXT ContextRecord;
};

/* 43 */
struct _EXCEPTION_RECORD
{
  DWORD ExceptionCode;
  DWORD ExceptionFlags;
  _EXCEPTION_RECORD *ExceptionRecord;
  PVOID ExceptionAddress;
  DWORD NumberParameters;
  ULONG_PTR ExceptionInformation[15];
};

/* 49 */
struct _FLOATING_SAVE_AREA
{
  DWORD ControlWord;
  DWORD StatusWord;
  DWORD TagWord;
  DWORD ErrorOffset;
  DWORD ErrorSelector;
  DWORD DataOffset;
  DWORD DataSelector;
  BYTE RegisterArea[80];
  DWORD Spare0;
};

/* 48 */
typedef _FLOATING_SAVE_AREA FLOATING_SAVE_AREA;

/* 47 */
#pragma pack(push, 4)
struct _CONTEXT
{
  DWORD ContextFlags;
  DWORD Dr0;
  DWORD Dr1;
  DWORD Dr2;
  DWORD Dr3;
  DWORD Dr6;
  DWORD Dr7;
  FLOATING_SAVE_AREA FloatSave;
  DWORD SegGs;
  DWORD SegFs;
  DWORD SegEs;
  DWORD SegDs;
  DWORD Edi;
  DWORD Esi;
  DWORD Ebx;
  DWORD Edx;
  DWORD Ecx;
  DWORD Eax;
  DWORD Ebp;
  DWORD Eip;
  DWORD SegCs;
  DWORD EFlags;
  DWORD Esp;
  DWORD SegSs;
  BYTE ExtendedRegisters[512];
};
#pragma pack(pop)

/* 53 */
typedef unsigned __int16 wchar_t;

/* 52 */
typedef wchar_t WCHAR;

/* 51 */
typedef WCHAR *LPWSTR;

/* 54 */
typedef BYTE *LPBYTE;

/* 50 */
struct _STARTUPINFOW
{
  DWORD cb;
  LPWSTR lpReserved;
  LPWSTR lpDesktop;
  LPWSTR lpTitle;
  DWORD dwX;
  DWORD dwY;
  DWORD dwXSize;
  DWORD dwYSize;
  DWORD dwXCountChars;
  DWORD dwYCountChars;
  DWORD dwFillAttribute;
  DWORD dwFlags;
  WORD wShowWindow;
  WORD cbReserved2;
  LPBYTE lpReserved2;
  HANDLE hStdInput;
  HANDLE hStdOutput;
  HANDLE hStdError;
};

/* 55 */
struct _FILETIME
{
  DWORD dwLowDateTime;
  DWORD dwHighDateTime;
};

/* 56 */
typedef _LARGE_INTEGER LARGE_INTEGER;

/* 58 */
struct _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E
{
  DWORD LowPart;
  LONG HighPart;
};

/* 59 */
typedef __int64 LONGLONG;

/* 57 */
union _LARGE_INTEGER
{
  struct
  {
    DWORD LowPart;
    LONG HighPart;
  };
  _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E u;
  LONGLONG QuadPart;
};

/* 61 */
typedef unsigned __int64 ULONGLONG;

/* 64 */
struct _SINGLE_LIST_ENTRY
{
  _SINGLE_LIST_ENTRY *Next;
};

/* 63 */
typedef _SINGLE_LIST_ENTRY SLIST_ENTRY;

/* 62 */
struct _SLIST_HEADER::$04C3B4B3818F1694974352AE64BF5082
{
  SLIST_ENTRY Next;
  WORD Depth;
  WORD CpuId;
};

/* 60 */
union _SLIST_HEADER
{
  ULONGLONG Alignment;
  struct
  {
    SLIST_ENTRY Next;
    WORD Depth;
    WORD CpuId;
  };
};

/* 65 */
enum _crt_argv_mode
{
  _crt_argv_no_arguments = 0x0,
  _crt_argv_unexpanded_arguments = 0x1,
  _crt_argv_expanded_arguments = 0x2,
};

/* 66 */
enum _crt_app_type
{
  _crt_unknown_app = 0x0,
  _crt_console_app = 0x1,
  _crt_gui_app = 0x2,
};

/* 67 */
struct QtCharts::QChart;

/* 68 */
struct QtCharts::QChartView;

/* 69 */
struct QtCharts::QLineSeries;

/* 70 */
struct QtCharts::QValueAxis;

/* 71 */
struct QtCharts::QXYSeries;

/* 72 */
struct QWidget;

/* 73 */
struct QLabel;

/* 74 */
struct QDialog;

/* 75 */
struct QAbstractButton;

/* 76 */
struct QLineEdit;

/* 77 */
struct QPushButton;

/* 78 */
struct QGraphicsItem;

/* 79 */
struct QFrame;

/* 80 */
struct QGraphicsWidget;

/* 81 */
struct QGraphicsView;

/* 82 */
struct QAbstractScrollArea;

/* 83 */
struct QMessageBox;

/* 84 */
struct QMainWindow;

/* 85 */
struct QObject;

/* 86 */
struct QSettings;

/* 87 */
struct QTimer;

